{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Project\\\\Web Project\\\\Greekforgreek_project\\\\React project\\\\movie_search_app\\\\src\\\\components\\\\SelectorComponent\\\\Dropdown\\\\index.js\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getMoviesByfilter } from '../../../api/movies';\nimport { getAllGenres } from \"../../../api/movies\";\nimport { Select } from '@chakra-ui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Dropdown() {\n  _s();\n  const dispatch = useDispatch();\n  const [selectedValue, setSelectedValue] = useState('');\n  const {\n    genres\n  } = useSelector(state => state.movies);\n  const handleChange = event => {\n    if (event.target.value === selectedValue) {\n      setSelectedValue(\"\");\n      dispatch(getMoviesByfilter(\"genre:\"));\n    } else {\n      setSelectedValue(event.target.value);\n      console.log(event.target.value);\n      let value = `genre:${event.target.value}`;\n      dispatch(getMoviesByfilter(value));\n    }\n  };\n  useEffect(() => {\n    dispatch(getAllGenres());\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Select, {\n    placeholder: \"Select option\",\n    value: selectedValue === \"\" ? \"Genres\" : selectedValue,\n    children: (genres === null || genres === void 0 ? void 0 : genres.length) > 0 && genres.map(item => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: item,\n      onClick: handleChange,\n      children: item\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 51\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this)\n  /*\r\n  <SlDropdown placement=\"top-start\">\r\n  <SlButton  slot=\"trigger\" caret  value={selectedValue}>\r\n  { (selectedValue === \"\")? \"Genres\" : selectedValue  }\r\n  </SlButton>\r\n  <SlMenu>\r\n    {genres?.length > 0 && genres.map((item) => <><SlMenuItem value={item} onClick={handleChange} >{item}</SlMenuItem><SlDivider /></>)}\r\n  </SlMenu>\r\n  </SlDropdown>*/;\n}\n_s(Dropdown, \"OR1gk5tHJnxShTCRzG+Ab/yJe3w=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = Dropdown;\nvar _c;\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"names":["React","useState","useEffect","useDispatch","useSelector","getMoviesByfilter","getAllGenres","Select","jsxDEV","_jsxDEV","Dropdown","_s","dispatch","selectedValue","setSelectedValue","genres","state","movies","handleChange","event","target","value","console","log","placeholder","children","length","map","item","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Project/Web Project/Greekforgreek_project/React project/movie_search_app/src/components/SelectorComponent/Dropdown/index.js"],"sourcesContent":["import * as React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getMoviesByfilter} from '../../../api/movies';\r\nimport { getAllGenres } from \"../../../api/movies\";\r\nimport { Select } from '@chakra-ui/react'\r\n\r\nexport default function Dropdown() { \r\n    const dispatch = useDispatch();\r\n    const [selectedValue, setSelectedValue] = useState('');\r\n    const { genres } = useSelector((state) => state.movies);\r\n    \r\n    const handleChange = (event) => {\r\n      if(event.target.value===selectedValue){\r\n        setSelectedValue(\"\");\r\n        dispatch(getMoviesByfilter(\"genre:\"));\r\n      }else{\r\n        setSelectedValue(event.target.value);\r\n        console.log(event.target.value)\r\n        let value = `genre:${event.target.value}`\r\n        dispatch(getMoviesByfilter(value));\r\n      }\r\n    };\r\n    \r\n    useEffect(() => {\r\n    dispatch(getAllGenres());\r\n    }, []);\r\n\r\n    return (\r\n    <Select placeholder='Select option' value= { (selectedValue === \"\")? \"Genres\" : selectedValue  }>\r\n      {genres?.length > 0 && genres.map((item) => <option value={item} onClick={handleChange} >{item}</option>)}\r\n    </Select>\r\n      /*\r\n  <SlDropdown placement=\"top-start\">\r\n    <SlButton  slot=\"trigger\" caret  value={selectedValue}>\r\n      { (selectedValue === \"\")? \"Genres\" : selectedValue  }\r\n    </SlButton>\r\n    <SlMenu>\r\n        {genres?.length > 0 && genres.map((item) => <><SlMenuItem value={item} onClick={handleChange} >{item}</SlMenuItem><SlDivider /></>)}\r\n    </SlMenu>\r\n  </SlDropdown>*/\r\n);\r\n}\r\n"],"mappings":";;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,iBAAiB,QAAO,qBAAqB;AACtD,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,MAAM,QAAQ,kBAAkB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzC,eAAe,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAC/B,MAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM;IAAEc;EAAO,CAAC,GAAGX,WAAW,CAAEY,KAAK,IAAKA,KAAK,CAACC,MAAM,CAAC;EAEvD,MAAMC,YAAY,GAAIC,KAAK,IAAK;IAC9B,IAAGA,KAAK,CAACC,MAAM,CAACC,KAAK,KAAGR,aAAa,EAAC;MACpCC,gBAAgB,CAAC,EAAE,CAAC;MACpBF,QAAQ,CAACP,iBAAiB,CAAC,QAAQ,CAAC,CAAC;IACvC,CAAC,MAAI;MACHS,gBAAgB,CAACK,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;MACpCC,OAAO,CAACC,GAAG,CAACJ,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;MAC/B,IAAIA,KAAK,GAAG,SAASF,KAAK,CAACC,MAAM,CAACC,KAAK,EAAE;MACzCT,QAAQ,CAACP,iBAAiB,CAACgB,KAAK,CAAC,CAAC;IACpC;EACF,CAAC;EAEDnB,SAAS,CAAC,MAAM;IAChBU,QAAQ,CAACN,YAAY,CAAC,CAAC,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACAG,OAAA,CAACF,MAAM;IAACiB,WAAW,EAAC,eAAe;IAACH,KAAK,EAAKR,aAAa,KAAK,EAAE,GAAG,QAAQ,GAAGA,aAAgB;IAAAY,QAAA,EAC7F,CAAAV,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEW,MAAM,IAAG,CAAC,IAAIX,MAAM,CAACY,GAAG,CAAEC,IAAI,iBAAKnB,OAAA;MAAQY,KAAK,EAAEO,IAAK;MAACC,OAAO,EAAEX,YAAa;MAAAO,QAAA,EAAGG;IAAI;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnG;EACN;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBARM;AAUN;AAACtB,EAAA,CAnCuBD,QAAQ;EAAA,QACXP,WAAW,EAETC,WAAW;AAAA;AAAA8B,EAAA,GAHVxB,QAAQ;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}