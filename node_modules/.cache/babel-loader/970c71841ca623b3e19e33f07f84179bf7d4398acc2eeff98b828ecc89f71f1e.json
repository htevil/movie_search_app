{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Project\\\\Web Project\\\\Greekforgreek_project\\\\React project\\\\movie_search_app\\\\src\\\\pages\\\\Home\\\\index.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getMovies } from \"../../api/movies\";\nimport Navbar from \"../../components/Navbar\";\nimport MovieCard from \"../../components/MovieCard\";\nimport Swiper from \"../../components/swiper\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ITEMS_PER_PAGE = 20; // Adjust this value as needed\n\nconst Home = () => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    movies\n  } = useSelector(state => state.movies); // Assuming totalMovies exists in Redux state\n\n  const totalMovies = movies.length;\n  console.log(movies, totalMovies);\n  const [currentPage, setCurrentPage] = useState(1);\n  useEffect(() => {\n    dispatch(getMovies());\n  }, []);\n  const handlePageChange = pageNumber => {\n    setCurrentPage(pageNumber);\n  };\n\n  // Calculate starting and ending indices for movies to display on current page\n  const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;\n  const endIndex = Math.min(startIndex + ITEMS_PER_PAGE, movies.length); // Ensure endIndex doesn't exceed movie count\n\n  const paginatedMovies = movies.slice(startIndex, endIndex); // Slice movies for current page\n\n  const totalPages = Math.ceil(totalMovies / ITEMS_PER_PAGE); // Calculate total pages\n\n  const renderPagination = () => {\n    if (totalPages <= 1) return null; // No pagination needed if only one page\n\n    const pageNumbers = [];\n    for (let i = 1; i <= totalPages; i++) {\n      pageNumbers.push(i);\n    }\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"pagination\",\n      children: [currentPage > 1 &&\n      /*#__PURE__*/\n      // Previous button if not on first page\n      _jsxDEV(\"li\", {\n        onClick: () => handlePageChange(currentPage - 1),\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), pageNumbers.map(pageNumber => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: pageNumber === currentPage ? \"active\" : \"\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePageChange(pageNumber),\n          children: pageNumber\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)\n      }, pageNumber, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)), currentPage < totalPages &&\n      /*#__PURE__*/\n      // Next button if not on last page\n      _jsxDEV(\"li\", {\n        onClick: () => handlePageChange(currentPage + 1),\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(Swiper, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container1\",\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: (movies === null || movies === void 0 ? void 0 : movies.length) > 0 ? paginatedMovies.map(movie => /*#__PURE__*/_jsxDEV(MovieCard, {\n          movie: movie\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), renderPagination()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Home, \"1p2tvx7qbCUmMe5ZVtzh2GokXkU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useState","useEffect","useDispatch","useSelector","getMovies","Navbar","MovieCard","Swiper","jsxDEV","_jsxDEV","Fragment","_Fragment","ITEMS_PER_PAGE","Home","_s","dispatch","movies","state","totalMovies","length","console","log","currentPage","setCurrentPage","handlePageChange","pageNumber","startIndex","endIndex","Math","min","paginatedMovies","slice","totalPages","ceil","renderPagination","pageNumbers","i","push","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","movie","id","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Project/Web Project/Greekforgreek_project/React project/movie_search_app/src/pages/Home/index.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getMovies } from \"../../api/movies\";\r\nimport Navbar from \"../../components/Navbar\";\r\nimport MovieCard from \"../../components/MovieCard\";\r\nimport Swiper from \"../../components/swiper\";\r\n\r\nconst ITEMS_PER_PAGE = 20; // Adjust this value as needed\r\n\r\nconst Home = () => {\r\n  const dispatch = useDispatch();\r\n  const { movies} = useSelector(state => state.movies); // Assuming totalMovies exists in Redux state\r\n\r\n  const totalMovies = movies.length;\r\n  console.log(movies, totalMovies)\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  useEffect(() => {\r\n    dispatch(getMovies());\r\n  }, []);\r\n\r\n  const handlePageChange = (pageNumber) => {\r\n    setCurrentPage(pageNumber);\r\n  };\r\n\r\n  // Calculate starting and ending indices for movies to display on current page\r\n  const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;\r\n  const endIndex = Math.min(startIndex + ITEMS_PER_PAGE, movies.length); // Ensure endIndex doesn't exceed movie count\r\n\r\n  const paginatedMovies = movies.slice(startIndex, endIndex); // Slice movies for current page\r\n\r\n  const totalPages = Math.ceil(totalMovies / ITEMS_PER_PAGE); // Calculate total pages\r\n\r\n  const renderPagination = () => {\r\n    if (totalPages <= 1) return null; // No pagination needed if only one page\r\n\r\n    const pageNumbers = [];\r\n    for (let i = 1; i <= totalPages; i++) {\r\n      pageNumbers.push(i);\r\n    }\r\n\r\n    return (\r\n      <ul className=\"pagination\">\r\n        {currentPage > 1 && ( // Previous button if not on first page\r\n          <li onClick={() => handlePageChange(currentPage - 1)}>\r\n            <button>Previous</button>\r\n          </li>\r\n        )}\r\n        {pageNumbers.map((pageNumber) => (\r\n          <li key={pageNumber} className={pageNumber === currentPage ? \"active\" : \"\"}>\r\n            <button onClick={() => handlePageChange(pageNumber)}>{pageNumber}</button>\r\n          </li>\r\n        ))}\r\n        {currentPage < totalPages && ( // Next button if not on last page\r\n          <li onClick={() => handlePageChange(currentPage + 1)}>\r\n            <button>Next</button>\r\n          </li>\r\n        )}\r\n      </ul>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <Swiper />\r\n      </div>\r\n      <div className=\"container1\">\r\n        <Navbar />\r\n        <section>\r\n          {movies?.length > 0 ? (\r\n            paginatedMovies.map((movie) => (\r\n              <MovieCard key={movie.id} movie={movie} />\r\n            ))\r\n          ) : (\r\n            <div>Loading...</div>\r\n          )}\r\n        </section>\r\n        {renderPagination()}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}