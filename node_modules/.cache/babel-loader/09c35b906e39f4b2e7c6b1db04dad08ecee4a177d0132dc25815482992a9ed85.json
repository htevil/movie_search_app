{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nfunction oo(o, t) {\n  let e = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  return function* () {\n    const i = void 0 === t ? 0 : o;\n    t ??= o;\n    for (let o = i; e > 0 ? o < t : t < o; o += e) yield o;\n  }();\n}\nexport { oo as range };","map":{"version":3,"names":["oo","o","t","e","arguments","length","undefined","i","range"],"sources":["C:\\Users\\ASUS\\Project\\Web Project\\Greekforgreek_project\\React project\\movie_search_app\\node_modules\\lit-html\\src\\directives\\range.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Returns an iterable of integers from `start` to `end` (exclusive)\n * incrementing by `step`.\n *\n * If `start` is omitted, the range starts at `0`. `step` defaults to `1`.\n *\n * @example\n *\n * ```ts\n * render() {\n *   return html`\n *     ${map(range(8), () => html`<div class=\"cell\"></div>`)}\n *   `;\n * }\n * ```\n */\nexport function range(end: number): Iterable<number>;\nexport function range(\n  start: number,\n  end: number,\n  step?: number,\n): Iterable<number>;\nexport function* range(startOrEnd: number, end?: number, step = 1) {\n  const start = end === undefined ? 0 : startOrEnd;\n  end ??= startOrEnd;\n  for (let i = start; step > 0 ? i < end : end < i; i += step) {\n    yield i;\n  }\n}\n"],"mappings":";;;;;AA4BM,SAAWA,GAAMC,CAAA,EAAoBC,CAAA;EAAA,IAAcC,CAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAO;EAAA;IAC9D,MAAMG,CAAA,QAAgB,MAARL,CAAA,GAAoB,IAAID,CAAA;IACtCC,CAAA,KAAQD,CAAA;IACR,KAAK,IAAIA,CAAA,GAAIM,CAAA,EAAOJ,CAAA,GAAO,IAAIF,CAAA,GAAIC,CAAA,GAAMA,CAAA,GAAMD,CAAA,EAAGA,CAAA,IAAKE,CAAA,QAC/CF,CAEV;EAAA;AAAA;AAAA,SAAAD,EAAA,IAAAQ,KAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}