{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nexport function* range(startOrEnd, end, step = 1) {\n  const start = end === undefined ? 0 : startOrEnd;\n  end ??= startOrEnd;\n  for (let i = start; step > 0 ? i < end : end < i; i += step) {\n    yield i;\n  }\n}","map":{"version":3,"names":["range","startOrEnd","end","step","start","undefined","i"],"sources":["C:\\Users\\ASUS\\Project\\Web Project\\Greekforgreek_project\\React project\\movie_search_app\\node_modules\\lit-html\\src\\directives\\range.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Returns an iterable of integers from `start` to `end` (exclusive)\n * incrementing by `step`.\n *\n * If `start` is omitted, the range starts at `0`. `step` defaults to `1`.\n *\n * @example\n *\n * ```ts\n * render() {\n *   return html`\n *     ${map(range(8), () => html`<div class=\"cell\"></div>`)}\n *   `;\n * }\n * ```\n */\nexport function range(end: number): Iterable<number>;\nexport function range(\n  start: number,\n  end: number,\n  step?: number,\n): Iterable<number>;\nexport function* range(startOrEnd: number, end?: number, step = 1) {\n  const start = end === undefined ? 0 : startOrEnd;\n  end ??= startOrEnd;\n  for (let i = start; step > 0 ? i < end : end < i; i += step) {\n    yield i;\n  }\n}\n"],"mappings":"AAAA;;;;;AA4BA,OAAM,UAAWA,KAAKA,CAACC,UAAkB,EAAEC,GAAY,EAAEC,IAAI,GAAG,CAAC;EAC/D,MAAMC,KAAK,GAAGF,GAAG,KAAKG,SAAS,GAAG,CAAC,GAAGJ,UAAU;EAChDC,GAAG,KAAKD,UAAU;EAClB,KAAK,IAAIK,CAAC,GAAGF,KAAK,EAAED,IAAI,GAAG,CAAC,GAAGG,CAAC,GAAGJ,GAAG,GAAGA,GAAG,GAAGI,CAAC,EAAEA,CAAC,IAAIH,IAAI,EAAE;IAC3D,MAAMG,CAAC;EACT;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}