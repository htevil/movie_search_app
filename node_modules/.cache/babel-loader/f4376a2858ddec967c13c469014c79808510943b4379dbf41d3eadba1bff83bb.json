{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMinimumPageMargins = exports.getMediaQueryPageMargins = exports.getMediaQuery = exports.getMediaQueries = void 0;\n/*\nCopyright (c) Uber Technologies, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n*/\n\n/**\n * Helper function that generates media queries based on breakpoint, e.g.\n * getMediaQuery(720) => '@media screen and (min-width: 720px)'\n */\nconst getMediaQuery = breakpoint => `@media screen and (min-width: ${breakpoint}px)`;\nexports.getMediaQuery = getMediaQuery;\nconst getMediaQueries = breakpoints => Object.keys(breakpoints)\n// @ts-ignore\n.map(key => breakpoints[key]).sort((a, b) => a - b).map(getMediaQuery);\nexports.getMediaQueries = getMediaQueries;\nconst getMinimumPageMargins = margins => {\n  const margin = Array.isArray(margins) ? margins[0] : margins;\n  return {\n    paddingInlineStart: `${margin}px`,\n    paddingInlineEnd: `${margin}px`\n  };\n};\nexports.getMinimumPageMargins = getMinimumPageMargins;\nconst getMediaQueryPageMargins = theme => {\n  const result = {};\n  const mediaQueries = getMediaQueries(theme.breakpoints);\n  for (const [index, query] of mediaQueries.entries()) {\n    // There is no guarantee grid.margins will have enough margins to satisfy\n    // each breakpoint.\n    const margin = Array.isArray(theme.grid.margins) ? theme.grid.margins[index] ?? theme.grid.margins.at(-1) : theme.grid.margins;\n    result[query] = {\n      paddingInlineStart: `${margin}px`,\n      paddingInlineEnd: `${margin}px`\n    };\n  }\n  return result;\n};\nexports.getMediaQueryPageMargins = getMediaQueryPageMargins;","map":{"version":3,"names":["Object","defineProperty","exports","value","getMinimumPageMargins","getMediaQueryPageMargins","getMediaQuery","getMediaQueries","breakpoint","breakpoints","keys","map","key","sort","a","b","margins","margin","Array","isArray","paddingInlineStart","paddingInlineEnd","theme","result","mediaQueries","index","query","entries","grid","at"],"sources":["C:/Users/ASUS/Project/Web Project/Greekforgreek_project/React project/movie_search_app/node_modules/baseui/helpers/responsive-helpers.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMinimumPageMargins = exports.getMediaQueryPageMargins = exports.getMediaQuery = exports.getMediaQueries = void 0;\n/*\nCopyright (c) Uber Technologies, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n*/\n\n/**\n * Helper function that generates media queries based on breakpoint, e.g.\n * getMediaQuery(720) => '@media screen and (min-width: 720px)'\n */\nconst getMediaQuery = breakpoint => `@media screen and (min-width: ${breakpoint}px)`;\nexports.getMediaQuery = getMediaQuery;\nconst getMediaQueries = breakpoints => Object.keys(breakpoints)\n// @ts-ignore\n.map(key => breakpoints[key]).sort((a, b) => a - b).map(getMediaQuery);\nexports.getMediaQueries = getMediaQueries;\nconst getMinimumPageMargins = margins => {\n  const margin = Array.isArray(margins) ? margins[0] : margins;\n  return {\n    paddingInlineStart: `${margin}px`,\n    paddingInlineEnd: `${margin}px`\n  };\n};\nexports.getMinimumPageMargins = getMinimumPageMargins;\nconst getMediaQueryPageMargins = theme => {\n  const result = {};\n  const mediaQueries = getMediaQueries(theme.breakpoints);\n  for (const [index, query] of mediaQueries.entries()) {\n    // There is no guarantee grid.margins will have enough margins to satisfy\n    // each breakpoint.\n    const margin = Array.isArray(theme.grid.margins) ? theme.grid.margins[index] ?? theme.grid.margins.at(-1) : theme.grid.margins;\n    result[query] = {\n      paddingInlineStart: `${margin}px`,\n      paddingInlineEnd: `${margin}px`\n    };\n  }\n  return result;\n};\nexports.getMediaQueryPageMargins = getMediaQueryPageMargins;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,qBAAqB,GAAGF,OAAO,CAACG,wBAAwB,GAAGH,OAAO,CAACI,aAAa,GAAGJ,OAAO,CAACK,eAAe,GAAG,KAAK,CAAC;AAC3H;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAMD,aAAa,GAAGE,UAAU,IAAI,iCAAiCA,UAAU,KAAK;AACpFN,OAAO,CAACI,aAAa,GAAGA,aAAa;AACrC,MAAMC,eAAe,GAAGE,WAAW,IAAIT,MAAM,CAACU,IAAI,CAACD,WAAW;AAC9D;AAAA,CACCE,GAAG,CAACC,GAAG,IAAIH,WAAW,CAACG,GAAG,CAAC,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC,CAACJ,GAAG,CAACL,aAAa,CAAC;AACtEJ,OAAO,CAACK,eAAe,GAAGA,eAAe;AACzC,MAAMH,qBAAqB,GAAGY,OAAO,IAAI;EACvC,MAAMC,MAAM,GAAGC,KAAK,CAACC,OAAO,CAACH,OAAO,CAAC,GAAGA,OAAO,CAAC,CAAC,CAAC,GAAGA,OAAO;EAC5D,OAAO;IACLI,kBAAkB,EAAE,GAAGH,MAAM,IAAI;IACjCI,gBAAgB,EAAE,GAAGJ,MAAM;EAC7B,CAAC;AACH,CAAC;AACDf,OAAO,CAACE,qBAAqB,GAAGA,qBAAqB;AACrD,MAAMC,wBAAwB,GAAGiB,KAAK,IAAI;EACxC,MAAMC,MAAM,GAAG,CAAC,CAAC;EACjB,MAAMC,YAAY,GAAGjB,eAAe,CAACe,KAAK,CAACb,WAAW,CAAC;EACvD,KAAK,MAAM,CAACgB,KAAK,EAAEC,KAAK,CAAC,IAAIF,YAAY,CAACG,OAAO,CAAC,CAAC,EAAE;IACnD;IACA;IACA,MAAMV,MAAM,GAAGC,KAAK,CAACC,OAAO,CAACG,KAAK,CAACM,IAAI,CAACZ,OAAO,CAAC,GAAGM,KAAK,CAACM,IAAI,CAACZ,OAAO,CAACS,KAAK,CAAC,IAAIH,KAAK,CAACM,IAAI,CAACZ,OAAO,CAACa,EAAE,CAAC,CAAC,CAAC,CAAC,GAAGP,KAAK,CAACM,IAAI,CAACZ,OAAO;IAC9HO,MAAM,CAACG,KAAK,CAAC,GAAG;MACdN,kBAAkB,EAAE,GAAGH,MAAM,IAAI;MACjCI,gBAAgB,EAAE,GAAGJ,MAAM;IAC7B,CAAC;EACH;EACA,OAAOM,MAAM;AACf,CAAC;AACDrB,OAAO,CAACG,wBAAwB,GAAGA,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}