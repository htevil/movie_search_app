{"ast":null,"code":"import { _$LH as io } from \"./lit-html.js\";\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst {\n    I: et\n  } = io,\n  st = o => null === o || \"object\" != typeof o && \"function\" != typeof o,\n  no = {\n    HTML: 1,\n    SVG: 2,\n    MATHML: 3\n  },\n  nt = (o, t) => void 0 === t ? void 0 !== o?._$litType$ : o?._$litType$ === t,\n  ot = o => null != o?._$litType$?.h,\n  eo = o => void 0 !== o?._$litDirective$,\n  lo = o => o?._$litDirective$,\n  rt = o => void 0 === o.strings,\n  lt = () => document.createComment(\"\"),\n  at = (o, t, i) => {\n    const n = o._$AA.parentNode,\n      e = void 0 === t ? o._$AB : t._$AA;\n    if (void 0 === i) {\n      const t = n.insertBefore(lt(), e),\n        l = n.insertBefore(lt(), e);\n      i = new et(t, l, o, o.options);\n    } else {\n      const t = i._$AB.nextSibling,\n        l = i._$AM,\n        c = l !== o;\n      if (c) {\n        let t;\n        i._$AQ?.(o), i._$AM = o, void 0 !== i._$AP && (t = o._$AU) !== l._$AU && i._$AP(t);\n      }\n      if (t !== e || c) {\n        let o = i._$AA;\n        for (; o !== t;) {\n          const t = o.nextSibling;\n          n.insertBefore(o, e), o = t;\n        }\n      }\n    }\n    return i;\n  },\n  ct = function (o, t) {\n    let i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : o;\n    return o._$AI(t, i), o;\n  },\n  ht = {},\n  dt = function (o) {\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ht;\n    return o._$AH = t;\n  },\n  ut = o => o._$AH,\n  pt = o => {\n    o._$AP?.(!1, !0);\n    let t = o._$AA;\n    const i = o._$AB.nextSibling;\n    for (; t !== i;) {\n      const o = t.nextSibling;\n      t.remove(), t = o;\n    }\n  },\n  ft = o => {\n    o._$AR();\n  };\nexport { no as TemplateResultType, ft as clearPart, ut as getCommittedValue, lo as getDirectiveClass, at as insertPart, ot as isCompiledTemplateResult, eo as isDirectiveResult, st as isPrimitive, rt as isSingleExpression, nt as isTemplateResult, pt as removePart, ct as setChildPartValue, dt as setCommittedValue };","map":{"version":3,"names":["I","et","io","st","o","no","HTML","SVG","MATHML","nt","isTemplateResult","t","_$litType$","ot","h","eo","_$litDirective$","lo","rt","strings","lt","createMarker","document","createComment","at","insertPart","i","n","_$AA","parentNode","e","_$AB","insertBefore","l","options","nextSibling","_$AM","c","_$AQ","_$AP","_$AU","ct","setChildPartValue","arguments","length","undefined","_$AI","ht","dt","setCommittedValue","_$AH","ut","pt","remove","ft","_$AR","TemplateResultType","clearPart","getCommittedValue","getDirectiveClass","isCompiledTemplateResult","isDirectiveResult","isPrimitive","isSingleExpression","removePart"],"sources":["C:\\Users\\ASUS\\Project\\Web Project\\Greekforgreek_project\\React project\\movie_search_app\\node_modules\\lit-html\\src\\directive-helpers.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  _$LH,\n  Part,\n  DirectiveParent,\n  CompiledTemplateResult,\n  MaybeCompiledTemplateResult,\n  UncompiledTemplateResult,\n} from './lit-html.js';\nimport {\n  DirectiveResult,\n  DirectiveClass,\n  PartInfo,\n  AttributePartInfo,\n} from './directive.js';\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\n\nconst {_ChildPart: ChildPart} = _$LH;\n\ntype ChildPart = InstanceType<typeof ChildPart>;\n\nconst ENABLE_SHADYDOM_NOPATCH = true;\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  window.ShadyDOM?.inUse &&\n  window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM!.wrap\n    : (node: Node) => node;\n\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nexport const isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\n\nexport const TemplateResultType = {\n  HTML: 1,\n  SVG: 2,\n  MATHML: 3,\n} as const;\n\nexport type TemplateResultType =\n  (typeof TemplateResultType)[keyof typeof TemplateResultType];\n\ntype IsTemplateResult = {\n  (val: unknown): val is MaybeCompiledTemplateResult;\n  <T extends TemplateResultType>(\n    val: unknown,\n    type: T,\n  ): val is UncompiledTemplateResult<T>;\n};\n\n/**\n * Tests if a value is a TemplateResult or a CompiledTemplateResult.\n */\nexport const isTemplateResult: IsTemplateResult = (\n  value: unknown,\n  type?: TemplateResultType,\n): value is UncompiledTemplateResult =>\n  type === undefined\n    ? // This property needs to remain unminified.\n      (value as UncompiledTemplateResult)?.['_$litType$'] !== undefined\n    : (value as UncompiledTemplateResult)?.['_$litType$'] === type;\n\n/**\n * Tests if a value is a CompiledTemplateResult.\n */\nexport const isCompiledTemplateResult = (\n  value: unknown,\n): value is CompiledTemplateResult => {\n  return (value as CompiledTemplateResult)?.['_$litType$']?.h != null;\n};\n\n/**\n * Tests if a value is a DirectiveResult.\n */\nexport const isDirectiveResult = (value: unknown): value is DirectiveResult =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'] !== undefined;\n\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nexport const getDirectiveClass = (value: unknown): DirectiveClass | undefined =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'];\n\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nexport const isSingleExpression = (part: PartInfo) =>\n  (part as AttributePartInfo).strings === undefined;\n\nconst createMarker = () => document.createComment('');\n\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nexport const insertPart = (\n  containerPart: ChildPart,\n  refPart?: ChildPart,\n  part?: ChildPart,\n): ChildPart => {\n  const container = wrap(containerPart._$startNode).parentNode!;\n\n  const refNode =\n    refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(\n      startNode,\n      endNode,\n      containerPart,\n      containerPart.options,\n    );\n  } else {\n    const endNode = wrap(part._$endNode!).nextSibling;\n    const oldParent = part._$parent;\n    const parentChanged = oldParent !== containerPart;\n    if (parentChanged) {\n      part._$reparentDisconnectables?.(containerPart);\n      // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n      part._$parent = containerPart;\n      // Since the _$isConnected getter is somewhat costly, only\n      // read it once we know the subtree has directives that need\n      // to be notified\n      let newConnectionState;\n      if (\n        part._$notifyConnectionChanged !== undefined &&\n        (newConnectionState = containerPart._$isConnected) !==\n          oldParent!._$isConnected\n      ) {\n        part._$notifyConnectionChanged(newConnectionState);\n      }\n    }\n    if (endNode !== refNode || parentChanged) {\n      let start: Node | null = part._$startNode;\n      while (start !== endNode) {\n        const n: Node | null = wrap(start!).nextSibling;\n        wrap(container).insertBefore(start!, refNode);\n        start = n;\n      }\n    }\n  }\n\n  return part;\n};\n\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nexport const setChildPartValue = <T extends ChildPart>(\n  part: T,\n  value: unknown,\n  directiveParent: DirectiveParent = part,\n): T => {\n  part._$setValue(value, directiveParent);\n  return part;\n};\n\n// A sentinel value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nexport const setCommittedValue = (part: Part, value: unknown = RESET_VALUE) =>\n  (part._$committedValue = value);\n\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being committed.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nexport const getCommittedValue = (part: ChildPart) => part._$committedValue;\n\n/**\n * Removes a ChildPart from the DOM, including any of its content.\n *\n * @param part The Part to remove\n */\nexport const removePart = (part: ChildPart) => {\n  part._$notifyConnectionChanged?.(false, true);\n  let start: ChildNode | null = part._$startNode;\n  const end: ChildNode | null = wrap(part._$endNode!).nextSibling;\n  while (start !== end) {\n    const n: ChildNode | null = wrap(start!).nextSibling;\n    (wrap(start!) as ChildNode).remove();\n    start = n;\n  }\n};\n\nexport const clearPart = (part: ChildPart) => {\n  part._$clear();\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}